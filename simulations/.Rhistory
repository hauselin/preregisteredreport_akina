multi.hist(x)
x <- func(cols = 3, rows = 10000, rowTotal = 100, include = 0.25)
x
multi.hist(x)
x <- func(cols = 3, rows = 10000, rowTotal = 100, include = 0.25)
x
multi.hist(x)
x <- func(cols = 3, rows = 10000, rowTotal = 100, include = 0.25)
x
multi.hist(x)
x <- func(cols = 3, rows = 10000, rowTotal = 100, include = 0.25)
x
multi.hist(x)
x <- func(cols = 3, rows = 10000, rowTotal = 20, include = 0.25)
x
multi.hist(x)
x <- func(cols = 3, rows = 10000, rowTotal = 20, include = 0.25)
x
multi.hist(x)
x <- func(cols = 3, rows = 10000, rowTotal = 20, include = 0.25)
rowSums(x)
multi.hist(x)
x <- func(cols = 3, rows = 10000, rowTotal = 20, include = 0.25)
rowSums(x)
multi.hist(x)
x <- func(cols = 3, rows = 10000, rowTotal = 20, include = 0.25)
rowSums(x)
multi.hist(x)
x <- func(cols = 3, rows = 10000, rowTotal = 20, include = 0.25)
rowSums(x)
multi.hist(x)
x <- func(cols = 3, rows = 10000, rowTotal = 20, include = 0.25)
rowSums(x)
multi.hist(x)
x <- func(cols = 3, rows = 10000, rowTotal = 20, include = 0.1)
rowSums(x)
multi.hist(x)
x <- func(cols = 3, rows = 10000, rowTotal = 20, include = 0.1)
rowSums(x)
multi.hist(x)
x <- func(cols = 3, rows = 10000, rowTotal = 20, include = 0.1)
rowSums(x)
multi.hist(x)
x <- func(cols = 3, rows = 10000, rowTotal = 20, include = 0.1)
rowSums(x)
multi.hist(x)
x <- func(cols = 3, rows = 10000, rowTotal = 20, include = 0.1)
rowSums(x)
multi.hist(x)
x
x <- func(cols = 3, rows = 10000, rowTotal = 20, include = 0.1)
x
x <- func(cols = 3, rows = 10000, rowTotal = 20, include = 0.5)
x
include <- 0.1
cols <- 5
rows <- 10000
rowTotal <- 120
include <- 0.1
dt1 <- data.table(matrix(NA, nrow = rows * 20, ncol = cols))
dt1 <- dt1[, lapply(.SD, function(x) runif(n = .N, min = 0, max = floor(rowTotal / cols)))]
dt1 <- dt1[, lapply(.SD, function(x) x + ((rowTotal - rowSums(dt1)) / cols))]
dt1
dt1 <- dt1[, lapply(.SD, function(x) x + ((rowTotal - rowSums(dt1)) / cols))]
dt1
n <- names(dt1)
for (i in 1:ncol(dt1)) {
dt1 <- dt1[get(n[i]) %between% quantile(range(get(n[i])), c((1 - include) / 2, 1 - (1 - include) / 2))]
}
dt1
func <- function(cols = 3, rows = 10, rowTotal = 100, include = 0.25) {
dt1 <- data.table(matrix(NA, nrow = rows, ncol = cols))
dt1 <- dt1[, lapply(.SD, function(x) runif(n = .N, min = 0, max = floor(rowTotal / cols)))]
dt1 <- dt1[, lapply(.SD, function(x) x + ((rowTotal - rowSums(dt1)) / cols))]
n <- names(dt1)
for (i in 1:ncol(dt1)) {
dt1 <- dt1[get(n[i]) %between% quantile(range(get(n[i])), c((1 - include) / 2, 1 - (1 - include) / 2))]
}
return(dt1)
}
x <- func(cols = 3, rows = 10000, rowTotal = 20, include = 0.1)
rowSums(x)
x
rowSums(x)
multi.hist(x)
x <- func(cols = 3, rows = 1e7, rowTotal = 20, include = 0.1)
x
rowSums(x)
multi.hist(x)
x <- func(cols = 3, rows = 1e6, rowTotal = 20, include = 0.1)
x
rowSums(x)
multi.hist(x)
rowSums(x)
x <- func(cols = 3, rows = 1e6, rowTotal = 20, include = 0.1)
rowSums(x)
x
x <- func(cols = 3, rows = 1e6, rowTotal = 20, include = 0.05)
x
rowSums(x)
multi.hist(x)
x
hist(x$V1)
x <- func(cols = 3, rows = 1e5, rowTotal = 20, include = 0.05)
hist(x$V1)
x <- func(cols = 3, rows = 1e5, rowTotal = 20, include = 0.05)
hist(x$V1)
x <- func(cols = 3, rows = 1e5, rowTotal = 20, include = 0.05)
hist(x$V1)
x <- func(cols = 3, rows = 1e5, rowTotal = 20, include = 0.05)
hist(x$V1)
x <- func(cols = 3, rows = 1e5, rowTotal = 20, include = 0.05)
hist(x$V1)
x <- func(cols = 3, rows = 1e5, rowTotal = 20, include = 0.05)
hist(x$V1)
x <- func(cols = 3, rows = 1e5, rowTotal = 20, include = 0.05)
hist(x$V1)
x <- func(cols = 3, rows = 1e5, rowTotal = 20, include = 0.05)
hist(x$V1)
x <- func(cols = 3, rows = 1e5, rowTotal = 20, include = 0.05)
hist(x$V1)
library("brms")
library("dplyr")
library("tidyr")
library("tibble")    # for rownames_to_column
library("ggplot2")
library("gridExtra") # for grid.arrange
library("DescTools") # for CCC
install.packages("DescTools")
library("brms")
library("dplyr")
library("tidyr")
library("tibble")    # for rownames_to_column
library("ggplot2")
library("gridExtra") # for grid.arrange
library("DescTools") # for CCC
data(speed_acc, package = "rtdists")
speed_acc <- droplevels(speed_acc[!speed_acc$censor,]) # remove extreme RTs
speed_acc <- droplevels(speed_acc[ speed_acc$frequency %in%
c("high", "nw_high"),])
speed_acc$response2 <- as.numeric(speed_acc$response)-1
library(tidyverse); library(data.table); library(broom); library(dtplyr); library(lme4); library(lmerTest); library(ggbeeswarm); library(cowplot)
library(brms); library(rtdists)
data(speed_acc, package = "rtdists")
speed_acc$id %>% n_distinct()
speed_acc <- droplevels(speed_acc[!speed_acc$censor,]) # remove extreme RTs
speed_acc <- droplevels(speed_acc[ speed_acc$frequency %in% c("high", "nw_high"),])
speed_acc$response2 <- as.numeric(speed_acc$response)-1
str(speed_acc)
speed_acc <- speed_acc[speed_acc$id %in% c("1", "2"), ]
formula <- bf(rt | dec(response2) ~ 0 + condition, bs ~ 0 + condition, ndt ~ 1, bias ~ 1)
get_prior(formula,
data = speed_acc,
family = wiener(link_bs = "identity",
link_ndt = "identity",
link_bias = "identity"))
prior <- c(
prior("cauchy(0, 5)", class = "b")
)
tmp_dat <- make_standata(formula,
family = wiener(link_bs = "identity",
link_ndt = "identity",
link_bias = "identity"),
data = speed_acc, prior = prior)
initfun <- function() {
list(
b = rnorm(tmp_dat$K),
b_bs = runif(tmp_dat$K_bs, 1, 2),
b_ndt = runif(tmp_dat$K_ndt, 0.1, 0.15),
b_bias = rnorm(tmp_dat$K_bias, 0.5, 0.1),
sd_1 = runif(tmp_dat$M_1, 0.5, 1),
z_1 = matrix(rnorm(tmp_dat$M_1*tmp_dat$N_1, 0, 0.01),
tmp_dat$M_1, tmp_dat$N_1),
L_1 = diag(tmp_dat$M_1)
)
}
fit_wiener <- brm(formula, data = speed_acc, family = wiener(link_bs = "identity", link_ndt = "identity", link_bias = "identity"), prior = prior, inits = initfun, iter = 1000, warmup = 500, chains = 1, cores = 1)
data(speed_acc, package = "rtdists")
speed_acc <- droplevels(speed_acc[!speed_acc$censor,]) # remove extreme RTs
speed_acc <- droplevels(speed_acc[ speed_acc$frequency %in%
c("high", "nw_high"),])
speed_acc$response2 <- as.numeric(speed_acc$response)-1
speed_acc
tmp <- tempdir()
download.file("https://singmann.github.io/files/brms_wiener_example_fit.rda",
file.path(tmp, "brms_wiener_example_fit.rda"))
download.file("https://singmann.github.io/files/brms_wiener_example_predictions.rda",
file.path(tmp, "brms_wiener_example_predictions.rda"))
load(file.path(tmp, "brms_wiener_example_fit.rda"))
load(file.path(tmp, "brms_wiener_example_predictions.rda"))
pars <- parnames(fit_wiener)
pars_sel <- c(sample(pars[1:10], 3), sample(pars[-(1:10)], 3))
plot(fit_wiener, pars = pars_sel, N = 6,
ask = FALSE, exact_match = TRUE, newpage = TRUE, plot = TRUE)
data(speed_acc, package = "rtdists")
speed_acc <- droplevels(speed_acc[!speed_acc$censor,]) # remove extreme RTs
speed_acc <- droplevels(speed_acc[ speed_acc$frequency %in%
c("high", "nw_high"),])
speed_acc$response2 <- as.numeric(speed_acc$response)-1
str(speed_acc)
formula <- bf(rt | dec(response2) ~ 0 + condition:frequency +
(0 + condition:frequency|p|id),
bs ~ 0 + condition + (0 + condition|p|id),
ndt ~ 0 + condition + (0 + condition|p|id),
bias ~ 0 + condition + (0 + condition|p|id))
formula
prior <- c(
prior("cauchy(0, 5)", class = "b"),
set_prior("normal(1.5, 1)", class = "b", dpar = "bs"),
set_prior("normal(0.2, 0.1)", class = "b", dpar = "ndt"),
set_prior("normal(0.5, 0.2)", class = "b", dpar = "bias")
)
make_stancode(formula,
family = wiener(link_bs = "identity",
link_ndt = "identity",
link_bias = "identity"),
data = speed_acc,
prior = prior)
tmp_dat <- make_standata(formula,
family = wiener(link_bs = "identity",
link_ndt = "identity",
link_bias = "identity"),
data = speed_acc, prior = prior)
str(tmp_dat, 1, give.attr = FALSE)
initfun <- function() {
list(
b = rnorm(tmp_dat$K),
b_bs = runif(tmp_dat$K_bs, 1, 2),
b_ndt = runif(tmp_dat$K_ndt, 0.1, 0.15),
b_bias = rnorm(tmp_dat$K_bias, 0.5, 0.1),
sd_1 = runif(tmp_dat$M_1, 0.5, 1),
z_1 = matrix(rnorm(tmp_dat$M_1*tmp_dat$N_1, 0, 0.01),
tmp_dat$M_1, tmp_dat$N_1),
L_1 = diag(tmp_dat$M_1)
)
}
fit_wiener <- brm(formula,
data = speed_acc,
family = wiener(link_bs = "identity",
link_ndt = "identity",
link_bias = "identity"),
prior = prior, inits = initfun,
iter = 1000, warmup = 500,
chains = 4, cores = 4,
control = list(max_treedepth = 15))
library(tictoc)
tic()
toc()
# http://singmann.org/wiener-model-analysis-with-brms-part-ii/
library(tidyverse); library(data.table); library(broom); library(dtplyr); library(lme4); library(lmerTest); library(ggbeeswarm); library(cowplot)
library(brms); library(rtdists)
data(speed_acc, package = "rtdists")
speed_acc <- droplevels(speed_acc[!speed_acc$censor,]) # remove extreme RTs
speed_acc <- droplevels(speed_acc[ speed_acc$frequency %in%
c("high", "nw_high"),])
speed_acc$response2 <- as.numeric(speed_acc$response)-1
str(speed_acc)
speed_acc <- tbl_dt(speed_acc)
speed_acc[, id := as.numeric(id)]
speed_acc <- speed_acc[id < 9]
speed_acc <- data.frame(speed_acc)
formula <- bf(rt | dec(response2) ~ 0 + condition:frequency +
(0 + condition:frequency|p|id),
bs ~ 0 + condition + (0 + condition|p|id),
ndt ~ 0 + condition + (0 + condition|p|id),
bias ~ 0 + condition + (0 + condition|p|id))
prior <- c(
prior("cauchy(0, 5)", class = "b"),
set_prior("normal(1.5, 1)", class = "b", dpar = "bs"),
set_prior("normal(0.2, 0.1)", class = "b", dpar = "ndt"),
set_prior("normal(0.5, 0.2)", class = "b", dpar = "bias")
)
make_stancode(formula,
family = wiener(link_bs = "identity",
link_ndt = "identity",
link_bias = "identity"),
data = speed_acc,
prior = prior)
tmp_dat <- make_standata(formula,
family = wiener(link_bs = "identity",
link_ndt = "identity",
link_bias = "identity"),
data = speed_acc, prior = prior)
str(tmp_dat, 1, give.attr = FALSE)
initfun <- function() {
list(
b = rnorm(tmp_dat$K),
b_bs = runif(tmp_dat$K_bs, 1, 2),
b_ndt = runif(tmp_dat$K_ndt, 0.1, 0.15),
b_bias = rnorm(tmp_dat$K_bias, 0.5, 0.1),
sd_1 = runif(tmp_dat$M_1, 0.5, 1),
z_1 = matrix(rnorm(tmp_dat$M_1*tmp_dat$N_1, 0, 0.01),
tmp_dat$M_1, tmp_dat$N_1),
L_1 = diag(tmp_dat$M_1)
)
}
library(tictoc)
tic()
fit_wiener <- brm(formula,
data = speed_acc,
family = wiener(link_bs = "identity",
link_ndt = "identity",
link_bias = "identity"),
prior = prior, inits = initfun,
iter = 1000, warmup = 500,
chains = 1, cores = 1,
control = list(max_treedepth = 15))
toc()
NPRED <- 500
tic()
pred_wiener <- predict(fit_wiener,
summary = FALSE,
negative_rt = TRUE,
nsamples = NPRED)
toc()
4000000/80
4000000/80 * 0.01
4000000/80 * 0.01 / 60 / 60
library(tidyverse); library(data.table); library(broom); library(dtplyr); library(lme4); library(lmerTest); library(ggbeeswarm); library(cowplot)
matrix(n = 20 * 5000000)
matrix(rep(0.02,20 * 5000000))
x <- matrix(rep(0.02,20 * 5000000), ncol = 20)
object.size(x)
y <- data.table(x)
u
y
tables()
x <- matrix(rnorm(20*5000000)), ncol = 20)
x <- matrix(rnorm(20*5000000), ncol = 20)
object.size(x)
y <- data.table(x)
y
tables()
object.size(y)
library(tidyverse); library(data.table); library(broom); library(dtplyr); library(lme4); library(lmerTest); library(ggbeeswarm); library(cowplot)
dt1 <- fread("/Users/hause/Desktop/power_simulations.csv")
dt1
dt1[, .(power_b1 = mean(sig_x1, na.rm = T), power_b2 = mean(sig_x2, na.rm = T)), keyby = .(N.test, b1.test, b2.test, varInt.test, varSlope_b1.test, varSlope_b2.test, varResid.test)]
dt2 <- dt1[, .(power_b1 = mean(sig_x1, na.rm = T), power_b2 = mean(sig_x2, na.rm = T)), keyby = .(N.test, b1.test, b2.test, varInt.test, varSlope_b1.test, varSlope_b2.test, varResid.test)]
dt2
dt2[power_b1 > 0.90]
dt2 %>% fwrite("/Users/hause/desktop/power_simulations_avg.csv")
library(tidyverse); library(data.table); library(broom); library(dtplyr); library(lme4); library(lmerTest); library(ggbeeswarm); library(cowplot)
es(f = 0.15)
source("/Users/Hause/Dropbox/Working Datasets/functionsR/helperFunctions.R")
library(tidyverse); library(data.table); library(broom); library(dtplyr); library(lme4); library(lmerTest); library(ggbeeswarm); library(cowplot)
es(f = 0.15)
es(f = 0.12)
a <- "/Users/hause/Dropbox/Working Projects/Akina preregistered report/simulations/power_simulations1.csv"
a
a <- tbl_dt(fread("/Users/hause/Dropbox/Working Projects/Akina preregistered report/simulations/power_simulations1.csv"))
a
a[, unique(N.test)]
a[N.test == 60]
a
a[N.test == 60, unique(sig_x1)]
a <- tbl_dt(fread("/Users/hause/Desktop/power_simulations_avg.csv"))
a[, unique(N.test)]
a[N.test == 60, unique(sig_x1)]
a
a[N.test == 60, unique(power_b1)]
a[N.test == 60]
a[N.test == 60 & power_b1 > .90]
a[N.test == 60 & power_b1 > .90] %>% print(n = Inf)
a[N.test == 60 & power_b1 < .90] %>% print(n = Inf)
a[N.test == 60 & power_b1 < .90]
a[N.test == 60]
a[N.test == 60, hist(power_b1)]
a[, unique(b1.test)]
a[, .(mean(r_x1)), by = N.test]
a[, .(mean(r_x1)), by = .(N.test, b1.test, b2.test)]
a[, .(mean(r_x1)), by = .(N.test, b1.test, b2.test)] %>% print(n = Inf)
a[, .(mean(r_x1)), keby = .(N.test, b1.test, b2.test)] %>% print(n = Inf)
a[, .(mean(r_x1)), keyby = .(N.test, b1.test, b2.test)] %>% print(n = Inf)
a[, .(mean(r_x1)), keyby = .(N.test, b1.test)] %>% print(n = Inf)
es(r = .113)
a[, .(min(r_x1)), keyby = .(N.test, b1.test)] %>% print(n = Inf)
es(r = 0.07)
a[, .(median(r_x1)), keyby = .(N.test, b1.test)] %>% print(n = Inf)
es(r = 0.103)
a
a[N.test == 60, hist(power_b1)]
a[N.test == 60, median(power_b1)]
a[N.test == 60 & b1.test == 0.05 & r_x1 > 0.1, median(power_b1)]
a[N.test == 60 & b1.test == 0.05 & r_x1 > 0.2, median(power_b1)]
a[N.test == 60 & b1.test == 0.05 & r_x1 > 0.12, median(power_b1)]
library(tidyverse); library(data.table); library(broom); library(dtplyr); library(lme4); library(lmerTest); library(ggbeeswarm); library(cowplot); library(sjstats)
lm(mpg ~ cyl, mtcars)
r2(lm(mpg ~ cyl, mtcars))
r2(lm(mpg ~ 1, mtcars))
mtcars
r2(lm(mpg ~ cyl + qsec, mtcars))
r2(lm(mpg ~ qsec, mtcars))
x <- r2(lm(mpg ~ qsec, mtcars))
x$r2
x1 <- r2(lm(mpg ~ qsec, mtcars))
x2 <- r2(lm(mpg ~ cyl + qsec, mtcars))
x1$r2 - x2$r2
x1
x1$r2
x2$r2
x2$r2 - x1$r2
x2
x1
r2_diff(lm(mpg ~ qsec, mtcars), r2(lm(mpg ~ cyl + qsec, mtcars)))
m1 <- lm(mpg ~ qsec, mtcars)
m2 <- lm(mpg ~ cyl + qsec, mtcars)
sjstats
m1 <- lm(mpg ~ qsec, mtcars)
m2 <- lm(mpg ~ cyl + qsec, mtcars)
fit1 <- lmer(Reaction ~ Days + (Days | Subject), sleepstudy)
fit1
# all random effect variance components
re_var(fit1)
# all random effect variance components
class(re_var(fit1))
# all random effect variance components
re_var(fit1)[4, ]
# all random effect variance components
re_var(fit1)[4]
# all random effect variance components
re_var(fit1)[5]
# all random effect variance components
re_var(fit1)
fit1
24.740^2
summary(fit1)
# all random effect variance components
re_var(fit1)
abc <- function(x) {
print("sbc")
}
library(devtools)
install.packages("devtool")
install.packages("devtools")
library(devtools)
dump(abc, "abc.R")
dump("abc", "abc.R")
lm
dump("base::lm", 'lm.R')
dump("lm", 'lm.R')
dump("lm.fot", 'lm.R')
dump("lm.fitt", 'lm.R')
dump("lm.fit", 'lm.R')
library(devtools)
install.packages("roxygen2")
library(roxygen2)
dir()
library(devtools)
ls()
rm(list = ls())
install_github("hauselin/hausekeep")
library(hausekeep)
es
library(hausekeep)
es(d = 0.4)
library(tidyverse); library(data.table); library(broom); library(dtplyr); library(lme4); library(lmerTest); library(ggbeeswarm); library(cowplot); library(sjstats)
m1 <- lm(mpg ~ qsec, mtcars)
m2 <- lm(mpg ~ cyl + qsec, mtcars)
r2(m1)
r2(m2)
r2_diff(m1, m2)
fit1 <- lmer(Reaction ~ Days + (Days | Subject), sleepstudy)
summary(fit1)
r2(fit1)
sleepstudy
fit2 <- lmer(Reaction ~ Days + (Days | Subject), sleepstudy)
summary(fit2)
summaryh(fit2)
source("/Users/Hause/Dropbox/Working Datasets/functionsR/helperFunctions.R")
summary(fit1)
r2(fit2)
fit1 <- lmer(Reaction ~ 1 + (1 | Subject), sleepstudy)
summary(fit1)
r2(fit1)
summary(fit1)
r2(fit2)
r2(fit1)
library(tidyverse); library(data.table); library(broom); library(dtplyr); library(lme4); library(lmerTest); library(ggbeeswarm); library(cowplot)
setwd("/Users/Hause/Dropbox/Working Projects/Akina preregistered report/simulations")
knitr::opts_chunk$set(echo = TRUE)
dt1 <- fread("power_simulations_avg.csv")
dt1
library(data.table)
dt1 <- fread("power_simulations_avg.csv")
dt1
dt1[, unique(N.test)]
dt1[, unique(b1.test)]
source("/Users/Hause/Dropbox/Working Datasets/functionsR/helperFunctions.R")
library(data.table); library(hausekeep)
dt1[, unique(varInt.test)]
dt1[, unique(varSlope_b1.test)]
dt1[, unique(varSlope_b2.test)]
dt1[, unique(varResid.test)]
dt1 <- fread("power_simulations_avg.csv")
dt1
dt2 <- dt1[, .(power_b1 = mean(sig_x1, na.rm = T), power_b2 = mean(sig_x2, na.rm = T), r_x1 = mean(r_x1), r_x2 = mean(r_x2)),
keyby = .(N.test, b1.test, b2.test, varInt.test, varSlope_b1.test, varSlope_b2.test, varResid.test)]
dt2
library(data.table); library(hausekeep); library(tidyverse)
avg <- dt1[, .(min_r_x1 = min(r_x1),
min_r_x2 = min(r_x2),
pow_b1 = mean(power_b1),
pow_b2 = mean(power_b2)),
keyby = .(N.test, b1.test)]
avg[, f := es(r = min_r_x1)$f, by = .(N.test, b1.test)] %>% print()
ggplot(avg, aes(f, pow_b1, col = as.factor(N.test))) +
geom_point() +
# geom_line() +
geom_hline(yintercept = 0.90, linetype = 'dashed') +
labs(x = "Mininum simulated effect size (Cohen's f)", y = "Statistical power (alpha = 0.02)", col = "Sample size")
avg[, f := es(r = min_r_x1, msg = F)$f, by = .(N.test, b1.test)] %>% print()
